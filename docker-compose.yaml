services:
  backend:
    image: mikechatzis/hackatumtsichallenge:backend
    ports:
      - "8080:8080"
    restart: no
    depends_on:
      - postgres
  scenariorunner:
    image: mikechatzis/hackatumtsichallenge:scenariorunner
    ports:
      - "8090:8090"
    restart: always
    depends_on:
      - backend
      - frontend
      - postgres
  postgres:
    image: postgres:13-alpine
    hostname: postgres
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: tsi
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: no
  frontend:
    image: mikechatzis/hackatumtsichallenge:frontend
    ports:
      - "9000:9000"
    restart: no
    depends_on:
      - backend
  adminer:
    image: adminer
    ports:
      - "8081:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres
      ADMINER_DESIGN: nette  # Clean, modern theme
      ADMINER_DEFAULT_DB: tsi
      ADMINER_DEFAULT_USER: user
      ADMINER_DEFAULT_PASSWORD: password
    restart: no
    depends_on:
      - postgres
  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    restart: always
  celery_worker:
    build:
      context: .
      dockerfile: Dockerfile
    command: >
      sh -c "cd /app/CarAlgo && 
             make clean && 
             rm -f *.o && 
             make && 
             celery -A app.tasks.celery worker --loglevel=info"
    volumes:
      - .:/app
      - ./CarAlgo:/app/CarAlgo
    environment:
      - FLASK_ENV=development
      - PYTHONUNBUFFERED=1
    depends_on:
      - redis
      - ollsoft_website

  ollsoft_website:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "80:80"
    volumes:
      - .:/app
      - ./CarAlgo:/app/CarAlgo
    environment:
      - FLASK_ENV=development
      - FLASK_APP=app
      - FLASK_DEBUG=1
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
    command: >
      sh -c "cd /app/CarAlgo && 
             make clean && 
             rm -f *.o && 
             make && 
             python /app/run.py"

networks:
  default:
    driver: bridge

volumes:
  postgres_data:
    name: tsi_postgres_data